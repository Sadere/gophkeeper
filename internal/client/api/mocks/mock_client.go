// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package api is a generated GoMock package.
package api

import (
	context "context"
	reflect "reflect"

	model "github.com/Sadere/gophkeeper/pkg/model"
	gomock "github.com/golang/mock/gomock"
)

// MockIApiClient is a mock of IApiClient interface.
type MockIApiClient struct {
	ctrl     *gomock.Controller
	recorder *MockIApiClientMockRecorder
}

// MockIApiClientMockRecorder is the mock recorder for MockIApiClient.
type MockIApiClientMockRecorder struct {
	mock *MockIApiClient
}

// NewMockIApiClient creates a new mock instance.
func NewMockIApiClient(ctrl *gomock.Controller) *MockIApiClient {
	mock := &MockIApiClient{ctrl: ctrl}
	mock.recorder = &MockIApiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIApiClient) EXPECT() *MockIApiClientMockRecorder {
	return m.recorder
}

// DownloadFile mocks base method.
func (m *MockIApiClient) DownloadFile(ctx context.Context, ID uint64, fileName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFile", ctx, ID, fileName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadFile indicates an expected call of DownloadFile.
func (mr *MockIApiClientMockRecorder) DownloadFile(ctx, ID, fileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFile", reflect.TypeOf((*MockIApiClient)(nil).DownloadFile), ctx, ID, fileName)
}

// LoadPreviews mocks base method.
func (m *MockIApiClient) LoadPreviews(ctx context.Context) (model.SecretPreviews, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadPreviews", ctx)
	ret0, _ := ret[0].(model.SecretPreviews)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadPreviews indicates an expected call of LoadPreviews.
func (mr *MockIApiClientMockRecorder) LoadPreviews(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadPreviews", reflect.TypeOf((*MockIApiClient)(nil).LoadPreviews), ctx)
}

// LoadSecret mocks base method.
func (m *MockIApiClient) LoadSecret(ctx context.Context, ID uint64) (*model.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadSecret", ctx, ID)
	ret0, _ := ret[0].(*model.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadSecret indicates an expected call of LoadSecret.
func (mr *MockIApiClientMockRecorder) LoadSecret(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadSecret", reflect.TypeOf((*MockIApiClient)(nil).LoadSecret), ctx, ID)
}

// Login mocks base method.
func (m *MockIApiClient) Login(ctx context.Context, login, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, login, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockIApiClientMockRecorder) Login(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockIApiClient)(nil).Login), ctx, login, password)
}

// Register mocks base method.
func (m *MockIApiClient) Register(ctx context.Context, login, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, login, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockIApiClientMockRecorder) Register(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockIApiClient)(nil).Register), ctx, login, password)
}

// SaveCard mocks base method.
func (m *MockIApiClient) SaveCard(ctx context.Context, ID uint64, metadata, number string, expMonth, expYear, cvv uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCard", ctx, ID, metadata, number, expMonth, expYear, cvv)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCard indicates an expected call of SaveCard.
func (mr *MockIApiClientMockRecorder) SaveCard(ctx, ID, metadata, number, expMonth, expYear, cvv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCard", reflect.TypeOf((*MockIApiClient)(nil).SaveCard), ctx, ID, metadata, number, expMonth, expYear, cvv)
}

// SaveCredential mocks base method.
func (m *MockIApiClient) SaveCredential(ctx context.Context, ID uint64, metadata, login, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCredential", ctx, ID, metadata, login, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCredential indicates an expected call of SaveCredential.
func (mr *MockIApiClientMockRecorder) SaveCredential(ctx, ID, metadata, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCredential", reflect.TypeOf((*MockIApiClient)(nil).SaveCredential), ctx, ID, metadata, login, password)
}

// SaveText mocks base method.
func (m *MockIApiClient) SaveText(ctx context.Context, ID uint64, metadata, text string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveText", ctx, ID, metadata, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveText indicates an expected call of SaveText.
func (mr *MockIApiClientMockRecorder) SaveText(ctx, ID, metadata, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveText", reflect.TypeOf((*MockIApiClient)(nil).SaveText), ctx, ID, metadata, text)
}

// UploadFile mocks base method.
func (m *MockIApiClient) UploadFile(ctx context.Context, metadata, filePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", ctx, metadata, filePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockIApiClientMockRecorder) UploadFile(ctx, metadata, filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockIApiClient)(nil).UploadFile), ctx, metadata, filePath)
}
