// Code generated by MockGen. DO NOT EDIT.
// Source: secret.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	model "github.com/Sadere/gophkeeper/pkg/model"
	gomock "github.com/golang/mock/gomock"
)

// MockISecretService is a mock of ISecretService interface.
type MockISecretService struct {
	ctrl     *gomock.Controller
	recorder *MockISecretServiceMockRecorder
}

// MockISecretServiceMockRecorder is the mock recorder for MockISecretService.
type MockISecretServiceMockRecorder struct {
	mock *MockISecretService
}

// NewMockISecretService creates a new mock instance.
func NewMockISecretService(ctrl *gomock.Controller) *MockISecretService {
	mock := &MockISecretService{ctrl: ctrl}
	mock.recorder = &MockISecretServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISecretService) EXPECT() *MockISecretServiceMockRecorder {
	return m.recorder
}

// GetSecret mocks base method.
func (m *MockISecretService) GetSecret(ctx context.Context, password string, ID, userID uint64) (*model.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", ctx, password, ID, userID)
	ret0, _ := ret[0].(*model.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockISecretServiceMockRecorder) GetSecret(ctx, password, ID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockISecretService)(nil).GetSecret), ctx, password, ID, userID)
}

// GetUserSecrets mocks base method.
func (m *MockISecretService) GetUserSecrets(ctx context.Context, userID uint64) (model.Secrets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSecrets", ctx, userID)
	ret0, _ := ret[0].(model.Secrets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSecrets indicates an expected call of GetUserSecrets.
func (mr *MockISecretServiceMockRecorder) GetUserSecrets(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSecrets", reflect.TypeOf((*MockISecretService)(nil).GetUserSecrets), ctx, userID)
}

// SaveSecret mocks base method.
func (m *MockISecretService) SaveSecret(ctx context.Context, password string, secret *model.Secret) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSecret", ctx, password, secret)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveSecret indicates an expected call of SaveSecret.
func (mr *MockISecretServiceMockRecorder) SaveSecret(ctx, password, secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSecret", reflect.TypeOf((*MockISecretService)(nil).SaveSecret), ctx, password, secret)
}
