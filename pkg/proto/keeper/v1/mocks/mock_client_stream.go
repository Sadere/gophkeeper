// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Sadere/gophkeeper/pkg/proto/keeper/v1 (interfaces: UploadFile_ClientStream,DownloadFile_ClientStream)
//
// Generated by this command:
//
//	mockgen -destination mocks/mock_client_stream.go -package keeperv1 github.com/Sadere/gophkeeper/pkg/proto/keeper/v1 UploadFile_ClientStream,DownloadFile_ClientStream
//

// Package keeperv1 is a generated GoMock package.
package keeperv1

import (
	context "context"
	reflect "reflect"

	keeperv1 "github.com/Sadere/gophkeeper/pkg/proto/keeper/v1"
	gomock "go.uber.org/mock/gomock"
	metadata "google.golang.org/grpc/metadata"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockUploadFile_ClientStream is a mock of UploadFile_ClientStream interface.
type MockUploadFile_ClientStream struct {
	ctrl     *gomock.Controller
	recorder *MockUploadFile_ClientStreamMockRecorder
}

// MockUploadFile_ClientStreamMockRecorder is the mock recorder for MockUploadFile_ClientStream.
type MockUploadFile_ClientStreamMockRecorder struct {
	mock *MockUploadFile_ClientStream
}

// NewMockUploadFile_ClientStream creates a new mock instance.
func NewMockUploadFile_ClientStream(ctrl *gomock.Controller) *MockUploadFile_ClientStream {
	mock := &MockUploadFile_ClientStream{ctrl: ctrl}
	mock.recorder = &MockUploadFile_ClientStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUploadFile_ClientStream) EXPECT() *MockUploadFile_ClientStreamMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method.
func (m *MockUploadFile_ClientStream) CloseAndRecv() (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv.
func (mr *MockUploadFile_ClientStreamMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockUploadFile_ClientStream)(nil).CloseAndRecv))
}

// CloseSend mocks base method.
func (m *MockUploadFile_ClientStream) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockUploadFile_ClientStreamMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockUploadFile_ClientStream)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockUploadFile_ClientStream) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockUploadFile_ClientStreamMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockUploadFile_ClientStream)(nil).Context))
}

// Header mocks base method.
func (m *MockUploadFile_ClientStream) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockUploadFile_ClientStreamMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockUploadFile_ClientStream)(nil).Header))
}

// RecvMsg mocks base method.
func (m *MockUploadFile_ClientStream) RecvMsg(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockUploadFile_ClientStreamMockRecorder) RecvMsg(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockUploadFile_ClientStream)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockUploadFile_ClientStream) Send(arg0 *keeperv1.UploadFileRequestV1) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockUploadFile_ClientStreamMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockUploadFile_ClientStream)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m *MockUploadFile_ClientStream) SendMsg(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockUploadFile_ClientStreamMockRecorder) SendMsg(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockUploadFile_ClientStream)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockUploadFile_ClientStream) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockUploadFile_ClientStreamMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockUploadFile_ClientStream)(nil).Trailer))
}

// MockDownloadFile_ClientStream is a mock of DownloadFile_ClientStream interface.
type MockDownloadFile_ClientStream struct {
	ctrl     *gomock.Controller
	recorder *MockDownloadFile_ClientStreamMockRecorder
}

// MockDownloadFile_ClientStreamMockRecorder is the mock recorder for MockDownloadFile_ClientStream.
type MockDownloadFile_ClientStreamMockRecorder struct {
	mock *MockDownloadFile_ClientStream
}

// NewMockDownloadFile_ClientStream creates a new mock instance.
func NewMockDownloadFile_ClientStream(ctrl *gomock.Controller) *MockDownloadFile_ClientStream {
	mock := &MockDownloadFile_ClientStream{ctrl: ctrl}
	mock.recorder = &MockDownloadFile_ClientStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDownloadFile_ClientStream) EXPECT() *MockDownloadFile_ClientStreamMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockDownloadFile_ClientStream) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockDownloadFile_ClientStreamMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockDownloadFile_ClientStream)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockDownloadFile_ClientStream) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockDownloadFile_ClientStreamMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDownloadFile_ClientStream)(nil).Context))
}

// Header mocks base method.
func (m *MockDownloadFile_ClientStream) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockDownloadFile_ClientStreamMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockDownloadFile_ClientStream)(nil).Header))
}

// Recv mocks base method.
func (m *MockDownloadFile_ClientStream) Recv() (*keeperv1.DownloadFileResponseV1, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*keeperv1.DownloadFileResponseV1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockDownloadFile_ClientStreamMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockDownloadFile_ClientStream)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockDownloadFile_ClientStream) RecvMsg(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockDownloadFile_ClientStreamMockRecorder) RecvMsg(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockDownloadFile_ClientStream)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method.
func (m *MockDownloadFile_ClientStream) SendMsg(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockDownloadFile_ClientStreamMockRecorder) SendMsg(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockDownloadFile_ClientStream)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockDownloadFile_ClientStream) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockDownloadFile_ClientStreamMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockDownloadFile_ClientStream)(nil).Trailer))
}
