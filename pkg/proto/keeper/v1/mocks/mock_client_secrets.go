// Code generated by MockGen. DO NOT EDIT.
// Source: secrets_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source secrets_grpc.pb.go -destination mocks/mock_client_secrets.go -package keeperv1 SecretsServiceClient
//

// Package keeperv1 is a generated GoMock package.
package keeperv1

import (
	context "context"
	reflect "reflect"

	keeperv1 "github.com/Sadere/gophkeeper/pkg/proto/keeper/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockSecretsServiceClient is a mock of SecretsServiceClient interface.
type MockSecretsServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockSecretsServiceClientMockRecorder
}

// MockSecretsServiceClientMockRecorder is the mock recorder for MockSecretsServiceClient.
type MockSecretsServiceClientMockRecorder struct {
	mock *MockSecretsServiceClient
}

// NewMockSecretsServiceClient creates a new mock instance.
func NewMockSecretsServiceClient(ctrl *gomock.Controller) *MockSecretsServiceClient {
	mock := &MockSecretsServiceClient{ctrl: ctrl}
	mock.recorder = &MockSecretsServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretsServiceClient) EXPECT() *MockSecretsServiceClientMockRecorder {
	return m.recorder
}

// DownloadFileV1 mocks base method.
func (m *MockSecretsServiceClient) DownloadFileV1(ctx context.Context, in *keeperv1.DownloadFileRequestV1, opts ...grpc.CallOption) (grpc.ServerStreamingClient[keeperv1.DownloadFileResponseV1], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DownloadFileV1", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[keeperv1.DownloadFileResponseV1])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadFileV1 indicates an expected call of DownloadFileV1.
func (mr *MockSecretsServiceClientMockRecorder) DownloadFileV1(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFileV1", reflect.TypeOf((*MockSecretsServiceClient)(nil).DownloadFileV1), varargs...)
}

// GetUserSecretV1 mocks base method.
func (m *MockSecretsServiceClient) GetUserSecretV1(ctx context.Context, in *keeperv1.GetUserSecretRequestV1, opts ...grpc.CallOption) (*keeperv1.GetUserSecretResponseV1, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserSecretV1", varargs...)
	ret0, _ := ret[0].(*keeperv1.GetUserSecretResponseV1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSecretV1 indicates an expected call of GetUserSecretV1.
func (mr *MockSecretsServiceClientMockRecorder) GetUserSecretV1(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSecretV1", reflect.TypeOf((*MockSecretsServiceClient)(nil).GetUserSecretV1), varargs...)
}

// SaveUserSecretV1 mocks base method.
func (m *MockSecretsServiceClient) SaveUserSecretV1(ctx context.Context, in *keeperv1.SaveUserSecretRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveUserSecretV1", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveUserSecretV1 indicates an expected call of SaveUserSecretV1.
func (mr *MockSecretsServiceClientMockRecorder) SaveUserSecretV1(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUserSecretV1", reflect.TypeOf((*MockSecretsServiceClient)(nil).SaveUserSecretV1), varargs...)
}

// SecretPreviewsV1 mocks base method.
func (m *MockSecretsServiceClient) SecretPreviewsV1(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*keeperv1.SecretPreviewsResponseV1, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SecretPreviewsV1", varargs...)
	ret0, _ := ret[0].(*keeperv1.SecretPreviewsResponseV1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SecretPreviewsV1 indicates an expected call of SecretPreviewsV1.
func (mr *MockSecretsServiceClientMockRecorder) SecretPreviewsV1(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretPreviewsV1", reflect.TypeOf((*MockSecretsServiceClient)(nil).SecretPreviewsV1), varargs...)
}

// UploadFileV1 mocks base method.
func (m *MockSecretsServiceClient) UploadFileV1(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[keeperv1.UploadFileRequestV1, emptypb.Empty], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UploadFileV1", varargs...)
	ret0, _ := ret[0].(grpc.ClientStreamingClient[keeperv1.UploadFileRequestV1, emptypb.Empty])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFileV1 indicates an expected call of UploadFileV1.
func (mr *MockSecretsServiceClientMockRecorder) UploadFileV1(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFileV1", reflect.TypeOf((*MockSecretsServiceClient)(nil).UploadFileV1), varargs...)
}

// MockSecretsServiceServer is a mock of SecretsServiceServer interface.
type MockSecretsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockSecretsServiceServerMockRecorder
}

// MockSecretsServiceServerMockRecorder is the mock recorder for MockSecretsServiceServer.
type MockSecretsServiceServerMockRecorder struct {
	mock *MockSecretsServiceServer
}

// NewMockSecretsServiceServer creates a new mock instance.
func NewMockSecretsServiceServer(ctrl *gomock.Controller) *MockSecretsServiceServer {
	mock := &MockSecretsServiceServer{ctrl: ctrl}
	mock.recorder = &MockSecretsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretsServiceServer) EXPECT() *MockSecretsServiceServerMockRecorder {
	return m.recorder
}

// DownloadFileV1 mocks base method.
func (m *MockSecretsServiceServer) DownloadFileV1(arg0 *keeperv1.DownloadFileRequestV1, arg1 grpc.ServerStreamingServer[keeperv1.DownloadFileResponseV1]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFileV1", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadFileV1 indicates an expected call of DownloadFileV1.
func (mr *MockSecretsServiceServerMockRecorder) DownloadFileV1(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFileV1", reflect.TypeOf((*MockSecretsServiceServer)(nil).DownloadFileV1), arg0, arg1)
}

// GetUserSecretV1 mocks base method.
func (m *MockSecretsServiceServer) GetUserSecretV1(arg0 context.Context, arg1 *keeperv1.GetUserSecretRequestV1) (*keeperv1.GetUserSecretResponseV1, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSecretV1", arg0, arg1)
	ret0, _ := ret[0].(*keeperv1.GetUserSecretResponseV1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSecretV1 indicates an expected call of GetUserSecretV1.
func (mr *MockSecretsServiceServerMockRecorder) GetUserSecretV1(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSecretV1", reflect.TypeOf((*MockSecretsServiceServer)(nil).GetUserSecretV1), arg0, arg1)
}

// SaveUserSecretV1 mocks base method.
func (m *MockSecretsServiceServer) SaveUserSecretV1(arg0 context.Context, arg1 *keeperv1.SaveUserSecretRequestV1) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUserSecretV1", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveUserSecretV1 indicates an expected call of SaveUserSecretV1.
func (mr *MockSecretsServiceServerMockRecorder) SaveUserSecretV1(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUserSecretV1", reflect.TypeOf((*MockSecretsServiceServer)(nil).SaveUserSecretV1), arg0, arg1)
}

// SecretPreviewsV1 mocks base method.
func (m *MockSecretsServiceServer) SecretPreviewsV1(arg0 context.Context, arg1 *emptypb.Empty) (*keeperv1.SecretPreviewsResponseV1, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretPreviewsV1", arg0, arg1)
	ret0, _ := ret[0].(*keeperv1.SecretPreviewsResponseV1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SecretPreviewsV1 indicates an expected call of SecretPreviewsV1.
func (mr *MockSecretsServiceServerMockRecorder) SecretPreviewsV1(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretPreviewsV1", reflect.TypeOf((*MockSecretsServiceServer)(nil).SecretPreviewsV1), arg0, arg1)
}

// UploadFileV1 mocks base method.
func (m *MockSecretsServiceServer) UploadFileV1(arg0 grpc.ClientStreamingServer[keeperv1.UploadFileRequestV1, emptypb.Empty]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFileV1", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadFileV1 indicates an expected call of UploadFileV1.
func (mr *MockSecretsServiceServerMockRecorder) UploadFileV1(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFileV1", reflect.TypeOf((*MockSecretsServiceServer)(nil).UploadFileV1), arg0)
}

// mustEmbedUnimplementedSecretsServiceServer mocks base method.
func (m *MockSecretsServiceServer) mustEmbedUnimplementedSecretsServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSecretsServiceServer")
}

// mustEmbedUnimplementedSecretsServiceServer indicates an expected call of mustEmbedUnimplementedSecretsServiceServer.
func (mr *MockSecretsServiceServerMockRecorder) mustEmbedUnimplementedSecretsServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSecretsServiceServer", reflect.TypeOf((*MockSecretsServiceServer)(nil).mustEmbedUnimplementedSecretsServiceServer))
}

// MockUnsafeSecretsServiceServer is a mock of UnsafeSecretsServiceServer interface.
type MockUnsafeSecretsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeSecretsServiceServerMockRecorder
}

// MockUnsafeSecretsServiceServerMockRecorder is the mock recorder for MockUnsafeSecretsServiceServer.
type MockUnsafeSecretsServiceServerMockRecorder struct {
	mock *MockUnsafeSecretsServiceServer
}

// NewMockUnsafeSecretsServiceServer creates a new mock instance.
func NewMockUnsafeSecretsServiceServer(ctrl *gomock.Controller) *MockUnsafeSecretsServiceServer {
	mock := &MockUnsafeSecretsServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeSecretsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeSecretsServiceServer) EXPECT() *MockUnsafeSecretsServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedSecretsServiceServer mocks base method.
func (m *MockUnsafeSecretsServiceServer) mustEmbedUnimplementedSecretsServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSecretsServiceServer")
}

// mustEmbedUnimplementedSecretsServiceServer indicates an expected call of mustEmbedUnimplementedSecretsServiceServer.
func (mr *MockUnsafeSecretsServiceServerMockRecorder) mustEmbedUnimplementedSecretsServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSecretsServiceServer", reflect.TypeOf((*MockUnsafeSecretsServiceServer)(nil).mustEmbedUnimplementedSecretsServiceServer))
}
