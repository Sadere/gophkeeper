// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Sadere/gophkeeper/pkg/proto/keeper/v1 (interfaces: AuthServiceClient)
//
// Generated by this command:
//
//	mockgen -destination mocks/mock_client_auth.go -package keeperv1 github.com/Sadere/gophkeeper/pkg/proto/keeper/v1 AuthServiceClient
//

// Package keeperv1 is a generated GoMock package.
package keeperv1

import (
	context "context"
	reflect "reflect"

	keeperv1 "github.com/Sadere/gophkeeper/pkg/proto/keeper/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockAuthServiceClient is a mock of AuthServiceClient interface.
type MockAuthServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceClientMockRecorder
}

// MockAuthServiceClientMockRecorder is the mock recorder for MockAuthServiceClient.
type MockAuthServiceClientMockRecorder struct {
	mock *MockAuthServiceClient
}

// NewMockAuthServiceClient creates a new mock instance.
func NewMockAuthServiceClient(ctrl *gomock.Controller) *MockAuthServiceClient {
	mock := &MockAuthServiceClient{ctrl: ctrl}
	mock.recorder = &MockAuthServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthServiceClient) EXPECT() *MockAuthServiceClientMockRecorder {
	return m.recorder
}

// LoginV1 mocks base method.
func (m *MockAuthServiceClient) LoginV1(arg0 context.Context, arg1 *keeperv1.LoginRequestV1, arg2 ...grpc.CallOption) (*keeperv1.LoginResponseV1, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoginV1", varargs...)
	ret0, _ := ret[0].(*keeperv1.LoginResponseV1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginV1 indicates an expected call of LoginV1.
func (mr *MockAuthServiceClientMockRecorder) LoginV1(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginV1", reflect.TypeOf((*MockAuthServiceClient)(nil).LoginV1), varargs...)
}

// RegisterV1 mocks base method.
func (m *MockAuthServiceClient) RegisterV1(arg0 context.Context, arg1 *keeperv1.RegisterRequestV1, arg2 ...grpc.CallOption) (*keeperv1.RegisterResponseV1, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterV1", varargs...)
	ret0, _ := ret[0].(*keeperv1.RegisterResponseV1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterV1 indicates an expected call of RegisterV1.
func (mr *MockAuthServiceClientMockRecorder) RegisterV1(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterV1", reflect.TypeOf((*MockAuthServiceClient)(nil).RegisterV1), varargs...)
}
