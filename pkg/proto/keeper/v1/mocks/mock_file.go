// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Sadere/gophkeeper/pkg/proto/keeper/v1 (interfaces: SecretsService_UploadFileV1Server,SecretsService_DownloadFileV1Server)

// Package keeperv1 is a generated GoMock package.
package keeperv1

import (
	context "context"
	reflect "reflect"

	keeperv1 "github.com/Sadere/gophkeeper/pkg/proto/keeper/v1"
	gomock "github.com/golang/mock/gomock"
	metadata "google.golang.org/grpc/metadata"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockSecretsService_UploadFileV1Server is a mock of SecretsService_UploadFileV1Server interface.
type MockSecretsService_UploadFileV1Server struct {
	ctrl     *gomock.Controller
	recorder *MockSecretsService_UploadFileV1ServerMockRecorder
}

// MockSecretsService_UploadFileV1ServerMockRecorder is the mock recorder for MockSecretsService_UploadFileV1Server.
type MockSecretsService_UploadFileV1ServerMockRecorder struct {
	mock *MockSecretsService_UploadFileV1Server
}

// NewMockSecretsService_UploadFileV1Server creates a new mock instance.
func NewMockSecretsService_UploadFileV1Server(ctrl *gomock.Controller) *MockSecretsService_UploadFileV1Server {
	mock := &MockSecretsService_UploadFileV1Server{ctrl: ctrl}
	mock.recorder = &MockSecretsService_UploadFileV1ServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretsService_UploadFileV1Server) EXPECT() *MockSecretsService_UploadFileV1ServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockSecretsService_UploadFileV1Server) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSecretsService_UploadFileV1ServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSecretsService_UploadFileV1Server)(nil).Context))
}

// Recv mocks base method.
func (m *MockSecretsService_UploadFileV1Server) Recv() (*keeperv1.UploadFileRequestV1, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*keeperv1.UploadFileRequestV1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockSecretsService_UploadFileV1ServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockSecretsService_UploadFileV1Server)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockSecretsService_UploadFileV1Server) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSecretsService_UploadFileV1ServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSecretsService_UploadFileV1Server)(nil).RecvMsg), arg0)
}

// SendAndClose mocks base method.
func (m *MockSecretsService_UploadFileV1Server) SendAndClose(arg0 *emptypb.Empty) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose.
func (mr *MockSecretsService_UploadFileV1ServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockSecretsService_UploadFileV1Server)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method.
func (m *MockSecretsService_UploadFileV1Server) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockSecretsService_UploadFileV1ServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockSecretsService_UploadFileV1Server)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m *MockSecretsService_UploadFileV1Server) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSecretsService_UploadFileV1ServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSecretsService_UploadFileV1Server)(nil).SendMsg), arg0)
}

// SetHeader mocks base method.
func (m *MockSecretsService_UploadFileV1Server) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockSecretsService_UploadFileV1ServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockSecretsService_UploadFileV1Server)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockSecretsService_UploadFileV1Server) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockSecretsService_UploadFileV1ServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockSecretsService_UploadFileV1Server)(nil).SetTrailer), arg0)
}

// MockSecretsService_DownloadFileV1Server is a mock of SecretsService_DownloadFileV1Server interface.
type MockSecretsService_DownloadFileV1Server struct {
	ctrl     *gomock.Controller
	recorder *MockSecretsService_DownloadFileV1ServerMockRecorder
}

// MockSecretsService_DownloadFileV1ServerMockRecorder is the mock recorder for MockSecretsService_DownloadFileV1Server.
type MockSecretsService_DownloadFileV1ServerMockRecorder struct {
	mock *MockSecretsService_DownloadFileV1Server
}

// NewMockSecretsService_DownloadFileV1Server creates a new mock instance.
func NewMockSecretsService_DownloadFileV1Server(ctrl *gomock.Controller) *MockSecretsService_DownloadFileV1Server {
	mock := &MockSecretsService_DownloadFileV1Server{ctrl: ctrl}
	mock.recorder = &MockSecretsService_DownloadFileV1ServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretsService_DownloadFileV1Server) EXPECT() *MockSecretsService_DownloadFileV1ServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockSecretsService_DownloadFileV1Server) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSecretsService_DownloadFileV1ServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSecretsService_DownloadFileV1Server)(nil).Context))
}

// RecvMsg mocks base method.
func (m *MockSecretsService_DownloadFileV1Server) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSecretsService_DownloadFileV1ServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSecretsService_DownloadFileV1Server)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockSecretsService_DownloadFileV1Server) Send(arg0 *keeperv1.DownloadFileResponseV1) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockSecretsService_DownloadFileV1ServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSecretsService_DownloadFileV1Server)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockSecretsService_DownloadFileV1Server) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockSecretsService_DownloadFileV1ServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockSecretsService_DownloadFileV1Server)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m *MockSecretsService_DownloadFileV1Server) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSecretsService_DownloadFileV1ServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSecretsService_DownloadFileV1Server)(nil).SendMsg), arg0)
}

// SetHeader mocks base method.
func (m *MockSecretsService_DownloadFileV1Server) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockSecretsService_DownloadFileV1ServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockSecretsService_DownloadFileV1Server)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockSecretsService_DownloadFileV1Server) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockSecretsService_DownloadFileV1ServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockSecretsService_DownloadFileV1Server)(nil).SetTrailer), arg0)
}
